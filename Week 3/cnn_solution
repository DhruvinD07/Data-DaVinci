import tensorflow as tf
import numpy as np
import pickle
import os
import matplotlib.pyplot as plt
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Conv2D, MaxPooling2D, Dense, Dropout, Flatten
from tensorflow.keras.losses import SparseCategoricalCrossentropy


def load_cifar10_data(data_dir):
    """Loads CIFAR-10 dataset from a local directory."""
    train_images, train_labels = [], []

    
    for i in range(1, 6):
        with open(os.path.join(data_dir, f"data_batch_{i}"), 'rb') as f:
            batch = pickle.load(f, encoding='bytes')
            train_images.append(batch[b'data'])
            train_labels.extend(batch[b'labels'])

    
    train_images = np.vstack(train_images).reshape(-1, 3, 32, 32).transpose(0, 2, 3, 1)
    train_labels = np.array(train_labels)

    
    with open(os.path.join(data_dir, "test_batch"), 'rb') as f:
        test_batch = pickle.load(f, encoding='bytes')
        test_images = test_batch[b'data'].reshape(-1, 3, 32, 32).transpose(0, 2, 3, 1)
        test_labels = np.array(test_batch[b'labels'])

    return (train_images, train_labels), (test_images, test_labels)


data_directory = "./cifar-10"  
(train_images, train_labels), (test_images, test_labels) = load_cifar10_data(data_directory)


train_images, test_images = train_images / 255.0, test_images / 255.0


model = Sequential([
    Conv2D(32, (3, 3), activation='relu', input_shape=(32, 32, 3)),
    MaxPooling2D((2, 2)),

    Conv2D(64, (3, 3), activation='relu'),
    MaxPooling2D((2, 2)),

    Conv2D(128, (3, 3), activation='relu'),
    MaxPooling2D((2, 2)),

    Flatten(),
    Dense(256, activation='relu'),
    Dropout(0.3),
    Dense(128, activation='relu'),
    Dense(64, activation='relu'),
    Dropout(0.3),
    Dense(10, activation='softmax') 
])


model.compile(optimizer='adam', loss=SparseCategoricalCrossentropy(), metrics=['accuracy'])


history = model.fit(train_images, train_labels, epochs=10, validation_data=(test_images, test_labels))


plt.figure(figsize=(8, 6))
plt.plot(history.history['accuracy'], label='Train Accuracy')
plt.plot(history.history['val_accuracy'], label='Validation Accuracy')
plt.xlabel('Epoch')
plt.ylabel('Accuracy')
plt.ylim([0, 1])
plt.legend(loc='lower right')
plt.title("Training vs Validation Accuracy")
plt.savefig("accuracy_plot.png") 


test_loss, test_acc = model.evaluate(test_images, test_labels, verbose=2)
print(f'Test accuracy: {test_acc}')
