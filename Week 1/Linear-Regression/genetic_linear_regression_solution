import random
import numpy as np
import matplotlib.pyplot as plt

#Constants
PARAMETER = 10
LINEAR_REGRESSION_ERROR_RANGE = 3
ERROR_RANGE = 1.0001
MUTATION_RATE = 0.1
NUM_POINTS = 45
NUM_ELITES = 2  # Number of best lines to retain across generations

# Function 1: Generate random points along a line with added noise
# This function is already implemented for you.

def generate_random_points(num_points, slope, intercept):
    noise = np.random.normal(0, LINEAR_REGRESSION_ERROR_RANGE, num_points)
    x_coords = np.random.uniform(-PARAMETER, PARAMETER, num_points)
    y_coords = slope * x_coords + intercept + noise
    return np.column_stack((x_coords, y_coords))

# Function 2: Generate random lines by connecting two random points
'''
Instructions:
- Write a function that generates a list of random lines.
- Each line is represented as a list with a slope and intercept.
- Both slope and intercept should be random floats in the range [-PARAMETER, PARAMETER].
'''

def generate_random_lines(num_lines):
    slopes = np.random.uniform(-PARAMETER, PARAMETER, num_lines)
    intercepts = np.random.uniform(-PARAMETER, PARAMETER, num_lines)
    return np.column_stack((slopes, intercepts))

# Function 3: Measure the error (badness) of all lines using vectorized operations
'''
Instructions:
- Write a function that calculates how well a line fits the points.
- Use the formula: error = sum((predicted_y - actual_y) ** 2) for each line.
- Use NumPy for vectorized calculations.
'''

def calculate_errors(lines, points):
    x_coords = points[:, 0]
    y_coords = points[:, 1]
    err=[]
    for i, (m,c) in enumerate(lines):
        predicted_y = m*x_coords + c
        err.append(np.sum((predicted_y - y_coords) ** 2))
    return np.array(err)

# Function 4: Enhanced mutation function
'''
Instructions:
- Write a function that randomly mutates a line (its slope and intercept).
- Use the MUTATION_RATE to decide whether to mutate each parameter.
- Mutate by adding a small random value proportional to the current value.
'''

def mutate(line, mutation_rate=MUTATION_RATE):
    mutated_line = []
    for i in range(2):
        if random.random() < mutation_rate:
            mutated_line.append(line[i] + np.random.uniform(-0.1,0.1) * line[i])
        else:
            mutated_line.append(line[i])
    return np.array(mutated_line)

# Function 5: Create the next generation using crossover, mutation, and elitism
'''
Instructions:
- Write a function to create the next generation of lines.
- Retain the best `num_elites` lines as is.
- Perform crossover by mixing the slope of one parent with the intercept of another.
- Apply mutations to the offspring.
- Ensure the next generation has the same number of lines as the current generation.
'''

def create_next_generation(lines, points, num_elites=NUM_ELITES):
    newgen=[]
    errors=calculate_errors(lines,points)
    errors=np.argsort(errors)
    for i in range(num_elites):
        newgen.append(lines[errors[i]])
    
    for i in range(0,len(lines)-1,2):
        if len(newgen)==len(lines):
            break
        if len(newgen) < len(lines):
            remaining_line = lines[errors[-1]]
            newgen.append(mutate(remaining_line))
        parent1 = lines[errors[i]]
        parent2 = lines[errors[i+1]]
        offspring1 = [parent1[0], parent2[1]]
        offspring2 = [parent2[0], parent1[1]]
        offspring1 = mutate(offspring1)
        offspring2 = mutate(offspring2)
        newgen.append(np.array(offspring1))
        newgen.append(np.array(offspring2))

    return np.array(newgen)

# Function 6: Visualization function
# This has been implemented for you

'''
I did not know how to compile all figures into one so i used chatgpt's help and it told me to modify this to 
save all my figures into a pdf.
'''
def plot_progress(points, actual_line, predicted_line, generation):
    x = points[:, 0]
    y = points[:, 1]

    fig, ax = plt.subplots(figsize=(8, 6))  # Create a figure and axis
    ax.scatter(x, y, label="Data Points", color="blue")
    
    x_fit = np.linspace(min(x), max(x), 100)
    y_actual = actual_line[0] * x_fit + actual_line[1]
    y_predicted = predicted_line[0] * x_fit + predicted_line[1]

    ax.plot(x_fit, y_actual, label="Actual Line", color="green", linewidth=2)
    ax.plot(x_fit, y_predicted, label=f"Predicted Line (Gen {generation})", color="red", linestyle="dashed")
    
    ax.set_xlabel("X")
    ax.set_ylabel("Y")
    ax.set_title("Genetic Algorithm Progress")
    ax.legend()
    return fig

# Function 7: Main genetic algorithm implementation
'''
Instructions:
- Write the main loop of the genetic algorithm.
- Initialize a generation of random lines.
- Iterate through generations, calculating errors and selecting the best line.
- Break the loop if the best error is within the acceptable range (defined by ERROR_RANGE).
- Use the `plot_progress` function to visualize progress in each generation.
'''
from matplotlib.backends.backend_pdf import PdfPages

def genetic_algorithm():
    pdf_pages = PdfPages("genetic_algorithm_progress.pdf")
    # Generate test data
    num_points = NUM_POINTS
    true_slope = random.uniform(-PARAMETER, PARAMETER)
    true_intercept = random.uniform(-PARAMETER, PARAMETER)
    test_points = generate_random_points(num_points, true_slope, true_intercept)
    actual_line = [true_slope, true_intercept]
    
    count_gen=0
    current_lines=generate_random_lines(10)
    while count_gen<1001 :
        errors=calculate_errors(current_lines,test_points)
        best_line=current_lines[np.argmin(errors)]
        best_error=np.min(errors)
        if(best_error < ERROR_RANGE):
            print(f"Converged! Best line found at generation {count_gen}. Error: {best_error}")
            # Save the final plot
            fig = plot_progress(test_points, actual_line, best_line, count_gen)
            pdf_pages.savefig(fig)  # Save the figure to the PDF
            plt.close(fig)
            break
        
        if count_gen % 10 == 0:
            fig = plot_progress(test_points, actual_line, best_line, count_gen)
            pdf_pages.savefig(fig)  # Save the figure to the PDF
            plt.close(fig)
        
        prev_lines=current_lines
        current_lines= create_next_generation(prev_lines, test_points)
        count_gen+=1
    
    pdf_pages.close()
    print("Actual Line:", actual_line)
    print("Best Line Found:", best_line)
    return None

#Run the algorithm
genetic_algorithm()





#Output
Actual Line: [-3.4733772207700753, -7.705586326282974]
Best Line Found: [-3.30684658 -7.48486841]
